@*****************************************************************************

* Copyright (c) 2024 iRobot Corporation. All Rights Reserved.
*****************************************************************************@

@using iWip.Client.Models.Auth;
@using iWip.Client.Services.Auth;
@using iWip.Infrastructure.Models.Auth;
@using iWip.Infrastructure.Services.Auth;
@inject IAuthService authService
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Resource> L
@inject IMapper _mapper;

<MudDialog Class="w-1/4 pb-4 px-4">
    <DialogContent>
        <MudForm Model="@NewPasswordModel" @ref="@form" ValidationDelay="0" Class="flex flex-col gap-4">
            <MudText Typo="Typo.h4" GutterBottom="true">@L["new_password_title"]</MudText>
            <MudTextField @bind-Value="@NewPasswordModel.Password"
                          For="@(() => NewPasswordModel.Password)"
                          Label="@L["new_password"]"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          InputType="@NewPasswordModel.PasswordInputType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          OnAdornmentClick=@(() => TogglePasswordVisibility("password"))
                          Class="my-4" />

            <MudTextField @bind-Value="@NewPasswordModel.ConfirmPassword"
                          For="@(() => NewPasswordModel.ConfirmPassword)"
                          Label="@L["confirm_password"]"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          InputType="@NewPasswordModel.ConfirmPasswordInputType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_confirmPasswordInputIcon"
                          OnAdornmentClick=@(() => TogglePasswordVisibility("Confirmpassword"))
                          Class="my-4" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick=@SetNewPassword
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mt-2"
                       Disabled="@(_loading)">
                @if (_loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2"> @L["loading"]</MudText>
                }
                else
                {
                    <MudText>@L["new_password_title"]</MudText>
                }
            </MudButton>

        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public string UserName { get; set; }
    [Parameter] public string SessionId { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private SetNewPasswordModel NewPasswordModel = new();
    MudForm? form;
    private bool _loading = false;

    bool _passwordVisibility;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    string _confirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        NewPasswordModel.UserName = UserName;
        NewPasswordModel.SessionId = SessionId;

        await base.OnInitializedAsync();
    }

    void TogglePasswordVisibility(string input)
    {
        _passwordVisibility = false;

        if (input.Equals("password"))
        {
            NewPasswordModel.PasswordInputType = NewPasswordModel.PasswordInputType == InputType.Password ? InputType.Text : InputType.Password;
            _passwordInputIcon = _passwordInputIcon == Icons.Material.Filled.VisibilityOff ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            NewPasswordModel.ConfirmPasswordInputType = NewPasswordModel.ConfirmPasswordInputType == InputType.Password ? InputType.Text : InputType.Password;
            _confirmPasswordInputIcon = _confirmPasswordInputIcon == Icons.Material.Filled.VisibilityOff ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task SetNewPassword()
{
    try
    {

    _loading = true;

    await form!.Validate();

    if (form!.IsValid)
    {
        var newRequest = _mapper.Map<SetNewPasswordRequest>(NewPasswordModel);

        var result = await authService.SetNewPasswordAsync(newRequest);

        if (result.HttpStatusCode == System.Net.HttpStatusCode.OK)
        {
            if (result.HttpStatusCode == System.Net.HttpStatusCode.OK)
            {
                MudDialog.Close();

                        await ((AuthStateProvider)authStateProvider).UpdateAuthenticationState(result.Response);

                var returnUrl = NavigationManager.GetUriWithQueryParameter("returnUrl", "") ?? "";
                NavigationManager.NavigateTo(returnUrl);
            }
        }
        else
            Snackbar.Add(result.Message, Severity.Error); // L["set_new_pass_failed"]
    }
    else
    {
        Snackbar.Add(L["set_new_pass_failed"], Severity.Error);
    }
    }
    catch (Exception e)
    {
    Snackbar.Add(L["set_new_pass_failed"], Severity.Error);
    }
    finally
    {
    _loading = false;
    }
}
}
