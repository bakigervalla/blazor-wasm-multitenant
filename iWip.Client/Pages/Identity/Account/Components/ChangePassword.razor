@*****************************************************************************

* Copyright (c) 2024 iRobot Corporation. All Rights Reserved.
*****************************************************************************@

@using iWip.Client.Models.Auth;
@using iWip.Infrastructure.Models.Auth;
@using iWip.Infrastructure.Services.Auth;
@inject IAuthService authService
@inject IMapper _mapper;
@inject IStringLocalizer<Resource> L

<div class="flex">
    <div class="px-6 w-2/4">

        <div class="flex items-center">
            <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.Password" />
            <MudText Class="py-4" Typo="Typo.h6">@L["change_password"]</MudText>
        </div>
        <MudDivider Class="mb-8" />

        <MudForm Model="@ChangePasswordModel" @ref="@form" ValidationDelay="0" Class="flex flex-col gap-2 w-2/4">
            <MudTextField @bind-Value="@ChangePasswordModel.CurrentPassword"
                          For="@(() => ChangePasswordModel.CurrentPassword)"
                          Label="@L["current_password"]"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          InputType="@ChangePasswordModel.CurrentPasswordInputType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@ChangePasswordModel.CurrentPasswordIcon"
                          OnAdornmentClick=@(() => TogglePasswordVisibility("CurrentPassword")) />

            <MudTextField @bind-Value="@ChangePasswordModel.Password"
                          For="@(() => ChangePasswordModel.Password)"
                          Label="@L["new_password"]"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          InputType="@ChangePasswordModel.PasswordInputType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@ChangePasswordModel.PasswordIcon"
                          OnAdornmentClick=@(() => TogglePasswordVisibility("Password")) />

            <MudTextField @bind-Value="@ChangePasswordModel.ConfirmPassword"
                          For="@(() => ChangePasswordModel.ConfirmPassword)"
                          Label="@L["confirm_password"]"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          InputType="@ChangePasswordModel.ConfirmPasswordInputType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@ChangePasswordModel.ConfirmPasswordIcon"
                          OnAdornmentClick=@(() => TogglePasswordVisibility("ConfirmPassword")) />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick=@SubmitChangePassword
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mt-2"
                       Disabled="@(_loading)">
                @if (_loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2"> @L["loading"]</MudText>
                }
                else
                {
                    <MudText>@L["new_password_title"]</MudText>
                }
            </MudButton>

        </MudForm>

    </div>
</div>

@code {

    private ChangePasswordModel ChangePasswordModel = new();
    MudForm? form;
    private bool _loading = false;

    bool _passwordVisibility;

    private async Task SubmitChangePassword()
    {
        try
        {

            _loading = true;

            await form!.Validate();

            if (form!.IsValid)
            {
                var changePassword = _mapper.Map<ChangePasswordRequest>(ChangePasswordModel);

                var result = await authService.ChangePasswordAsync(changePassword);

                if (result.HttpStatusCode == System.Net.HttpStatusCode.OK)
                {
                    Snackbar.Add(L["change_pass_success"], Severity.Success);
                    ChangePasswordModel = new();
                }
                else
                    Snackbar.Add(result.Message, Severity.Error);
            }
            else
            {
                Snackbar.Add(L["change_pass_failed"], Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(L["change_pass_failed"], Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    void TogglePasswordVisibility(string input)
    {
        @if (_passwordVisibility)
        {
            _passwordVisibility = false;

            if (input.Equals("CurrentPassword"))
            {
                ChangePasswordModel.CurrentPasswordInputType = InputType.Password;
                ChangePasswordModel.CurrentPasswordIcon = Icons.Material.Filled.VisibilityOff;
            }
            else if (input.Equals("Password"))
            {
                ChangePasswordModel.PasswordInputType = InputType.Password;
                ChangePasswordModel.PasswordIcon = Icons.Material.Filled.VisibilityOff;
            }
            else
            {
                ChangePasswordModel.ConfirmPasswordInputType = InputType.Password;
                ChangePasswordModel.ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
            }
        }
        else
        {
            _passwordVisibility = true;
            if (input.Equals("CurrentPassword"))
            {
                ChangePasswordModel.CurrentPasswordInputType = InputType.Text;
                ChangePasswordModel.CurrentPasswordIcon = Icons.Material.Filled.Visibility;
            }
            else if (input.Equals("Password"))
            {
                ChangePasswordModel.PasswordInputType = InputType.Text;
                ChangePasswordModel.PasswordIcon = Icons.Material.Filled.Visibility;
            }
            else
            {
                ChangePasswordModel.ConfirmPasswordInputType = InputType.Text;
                ChangePasswordModel.ConfirmPasswordIcon = Icons.Material.Filled.Visibility;
            }
        }
    }
}
