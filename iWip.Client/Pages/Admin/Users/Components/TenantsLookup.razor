@*****************************************************************************

* Copyright (c) 2024 iRobot Corporation. All Rights Reserved.
*****************************************************************************@

@using System.Linq.Expressions;
@using iWip.Infrastructure.Models.Tenants;
@using iWip.Infrastructure.Services.Tenants;
@inject IStringLocalizer<Resource> L

<label>@L["tenant"]</label>
<MudAutocomplete Clearable
                 CoerceText="true"
                 SearchFunc="@Search"
                 ToStringFunc="@(state => state.DisplayName)"
                 ValueChanged="@((e) => OnValueChanged.InvokeAsync(e))"
                 MaxItems=100
                 T="Tenant"
                 Value="Item"
                 ResetValueOnEmptyText="true"
                 Immediate="true"
                 Variant="Variant.Outlined"
                 Margin="Margin.Dense">
    <NoItemsTemplate>
        <MudText Align="Align.Center" Class="px-4 py-1">
            @L["autocomplete_empty_list_help_text"]
        </MudText>
    </NoItemsTemplate>
</MudAutocomplete>

@code {
    [Parameter] public Tenant Item { get; set; }
    [Parameter] public EventCallback<Tenant> OnValueChanged { get; set; }

    [Inject] private ITenantsService TenantsService { get; set; }

    private IEnumerable<Tenant> Tenants { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllTenantsAsync();
    }

    private async Task GetAllTenantsAsync()
    {
        var result = await TenantsService.GetAllTenantsLookupAsync();

        Tenants = result.Select(x => new Tenant
            {
                ID = x.ID,
                ShortName = x.ShortName
            });
    }

    private async Task<IEnumerable<Tenant>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Tenants;

        var result = Tenants.Where(x => x.DisplayName.Contains(value, StringComparison.InvariantCultureIgnoreCase));

        if (result.Count() > 0)
            return result;

        return await TenantsService.GetAllTenantsLookupAsync(value);

    }
}