@*****************************************************************************

* Copyright (c) 2024 iRobot Corporation. All Rights Reserved.
*****************************************************************************@

@using System.Net;
@using System.Text.RegularExpressions;
@using iWip.Client.Components.Shared.Dialogs;
@using iWip.Client.Models.Containers;
@using iWip.Client.Pages.Containers.Shared;
@using iWip.Infrastructure.Common.Constants.Permission;
@using iWip.Infrastructure.Models.Containers;
@using iWip.Infrastructure.Models.Containers.Requests;
@using iWip.Infrastructure.Models.Shipment;
@using iWip.Infrastructure.Services.Auth;
@using iWip.Infrastructure.Services.Containers;
@inject IStringLocalizer<Resource> L;
@inject IMapper _mapper;
@inject IAuthService authService

@if (Model is null)
{
    <div class="flex h-screen justify-center items-center">
        <MudProgressCircular Color="Color.Success" Indeterminate="true" />
    </div>
}
else
{
    <div class="flex flex-col items-center w-2/4 p-3 shadow-sm rounded-lg">
        <MudForm Model="@Model" @ref="@form" ValidationDelay="0" Class="flex flex-col w-2/4 gap-4" Style="width:70%">
            <InfoBox Title="@L["container_details"]"
                     ClassNames="pb-6" />
            <MudItem>
                <ShippingLookup Item="@Model.Shipping"
                                OnValueChanged="SetShipment"
                                For="@(() => Model.Shipping)" />
            </MudItem>
            <MudItem>
                <ContainerTypeLookup Item="@Model.CONTAINER_TYPE"
                                     OnValueChanged="SetContainerType"
                                     For="@(() => Model.CONTAINER_TYPE)" />
            </MudItem>
            <MudItem>
                <label>@L["container_no"]</label>
                <MudTextField @bind-Value="Model.CONTAINER_NUMBER"
                              For="@(() => Model.CONTAINER_NUMBER)"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Mask="@MaskContainerNumber"
                              Disabled="@IsContainerNumberDisabled()" />
            </MudItem>
            <MudItem>
                <label>@L["container_seal_no"]</label>
                <MudTextField @bind-Value="Model.SEAL_NUMBER"
                              For="@(() => Model.SEAL_NUMBER)"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
            </MudItem>
        </MudForm>
        <MudCardActions Class="flex w-full justify-center pt-8">
            <MudButton Variant="Variant.Filled" Color="Color.Default" Class="mr-16 w-32" OnClick="@OnCancel">@L["cancel"]</MudButton>
            @if (authService.User.HasAccess(new string[] { Permissions.Containers.Create, Permissions.Containers.Edit }))
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="w-32" OnClick="@(async () => await UpdateContainer())">@L["save"]</MudButton>
            }
            @if (authService.User.HasAccess(new string[] { Permissions.Containers.Delete }))
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="w-32 ml-4" OnClick="@(async () => await Delete())">@L["Delete"]</MudButton>
            }
        </MudCardActions>

    </div>
}

@code {
    [Parameter] public Container Container { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<Container> OnDelete { get; set; }
    [Parameter] public EventCallback<Container> OnSave { get; set; }

    [Inject] private IContainersService ContainersService { get; set; }

    private ContainerModel Model { get; set; } = new();
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        Model = _mapper.Map<ContainerModel>(Container);
    }

    private async Task UpdateContainer()
    {
        await form.Validate();

        if (form.IsValid)
        {
            // the character is removed by the mask
            Model.CONTAINER_NUMBER = Model.CONTAINER_NUMBER.Substring(0, 3) + 'U' + Model.CONTAINER_NUMBER.Substring(3);

            var updatedContainer = _mapper.Map<ContainerCreateUpdate>(Model);

            var response = await ContainersService.UpdateAsync(updatedContainer);

            if (response.HttpStatusCode == HttpStatusCode.Conflict)
                Snackbar.Add(string.Format(L["container_already_exists"], Model.SEAL_NUMBER), Severity.Error);
            else if (response.HttpStatusCode == HttpStatusCode.UnprocessableEntity)
                Snackbar.Add(string.Format(L["container_mixed_po_region"], Model.SEAL_NUMBER), Severity.Error);
            else if (response.HttpStatusCode == HttpStatusCode.OK)
            {
                Snackbar.Add(L["container_update_sucessfull"], Severity.Success);

                Container = response.Response;

                await OnSave.InvokeAsync(Container);
            }
            else
                Snackbar.Add(L["container_update_failed"], Severity.Error);
        }
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", L[$"container_delete_confirm"].ToString());
        var dialogresult = DialogService.Show<DialogConfirm>(L["delete"], parameters);
        var result = await dialogresult.Result;

        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
        {
            var response = await ContainersService.DeleteAsync(Model.CONTAINER_ID);

            if (response.HttpStatusCode != HttpStatusCode.OK)
                Snackbar.Add(L["container_delete_failed"], Severity.Error);
            else
                await OnDelete.InvokeAsync();
        }
    }

    private async Task SetShipment(ShippingHeader e)
    {
        Model.Shipping = e;
    }

    private async Task SetContainerType(string e)
    {
        Model.CONTAINER_TYPE = e;
    }

    private bool IsContainerNumberDisabled()
    {
        return string.IsNullOrEmpty(Model.CONTAINER_TYPE);
    }

    public PatternMask MaskContainerNumber = new PatternMask("XXXU#######")
    {
        MaskChars = new[] { new MaskChar('X', @"[a-zA-Z]"), new MaskChar('#', @"[0-9]") },
        Placeholder = '_',
        CleanDelimiters = true,
        Transformation = AllUpperCase
    };

    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];
}
