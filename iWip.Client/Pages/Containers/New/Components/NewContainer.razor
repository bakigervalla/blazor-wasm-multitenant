@*****************************************************************************

* Copyright (c) 2024 iRobot Corporation. All Rights Reserved.
*****************************************************************************@

@using System.Net;
@using AutoMapper;
@using iWip.Client.Components.Shared.Dialogs;
@using iWip.Client.Models.Containers;
@using iWip.Client.Pages.Containers.Shared;
@using iWip.Infrastructure.Common.Constants.Permission;
@using iWip.Infrastructure.Models.Containers;
@using iWip.Infrastructure.Models.Containers.Requests;
@using iWip.Infrastructure.Models.Shipment;
@using iWip.Infrastructure.Services.Auth;
@using iWip.Infrastructure.Services.Containers;
@inject IStringLocalizer<Resource> L;
@inject IMapper _mapper;
@inject IAuthService authService

<div class="flex">
    <div class="flex flex-col items-center w-2/4 p-3">
        <MudForm Model="@Model" @ref="@form" ValidationDelay="0" Class="flex flex-col w-2/4 gap-4" Style="width:60%">
            <InfoBox Title="@L["container_details"]"
                     ClassNames="pb-6" />
            @if (Model.CONTAINER_ID > 0)
            {
                <MudItem Class="mr-14">
                    <label>@L["container_id"]</label>
                    <MudItem>
                        <MudTextField @bind-Value="Model.CONTAINER_ID"
                                      For="@(() => Model.CONTAINER_ID)"
                                                Disabled
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Style="background-color:#E2E8F0" />
                    </MudItem>
                </MudItem>
            }
            <MudItem>
                <ShippingLookup Item="@Model.Shipping"
                                OnValueChanged="SetShipment"
                                For="@(() => Model.Shipping)" />
            </MudItem>
            <MudItem>
                <ContainerTypeLookup Item="@Model.CONTAINER_TYPE"
                                     OnValueChanged="SetContainerType"
                                     For="@(() => Model.CONTAINER_TYPE)" />
            </MudItem>
            <MudItem>
                <label>@L["container_no"]</label>
                <MudTextField @bind-Value="Model.CONTAINER_NUMBER"
                              For="@(() => Model.CONTAINER_NUMBER)"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Mask="@MaskContainerNumber"
                              Disabled="@IsContainerNumberDisabled()" />
            </MudItem>
            <MudItem>
                <label>@L["container_seal_no"]</label>
                <MudTextField @bind-Value="Model.SEAL_NUMBER"
                              For="@(() => Model.SEAL_NUMBER)"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
            </MudItem>
        </MudForm>
        <MudCardActions Class="flex w-full justify-center pt-8">
            @if (Model.CONTAINER_ID > 0)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Default" Class="mr-16 w-32" OnClick="@(async () => Model = new())">@L["cancel"]</MudButton>
                @if (authService.User.HasAccess(new string[] { Permissions.Containers.Create, Permissions.Containers.Edit }))
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="w-32" OnClick="@(async () => await UpdateContainer())">@L["save"]</MudButton>
                }
                if (authService.User.HasAccess(new string[] { Permissions.Containers.Delete }))
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="w-32 ml-4" OnClick="@(async () => await Delete())">@L["delete"]</MudButton>
                }
            }
            else
            {
                if (authService.User.HasAccess(new string[] { Permissions.Containers.Create, Permissions.Containers.Edit }))
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="w-40 mx-5" OnClick="@(async () => await CreateContainer(false))">@L["save_and_add_new"]</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="w-40 mx-5" OnClick="@(async () => await CreateContainer(true))">@($"{L["save_and_continue"]}")</MudButton>
                }
            }
        </MudCardActions>

    </div>

    @if (Containers.Count == 0)
    {
        <InfoBox Icon="@Icons.Material.Filled.AddToPhotos"
                 Title=@L["container_new_title"]
                 Subtitle=@L["container_new_subtitle"]
                 ClassNames="items-center justify-center w-2/5" />
    }
    else
    {
        <Containers Items="@Containers"
                    OnAddContainer="HandleAddContainer"
                    OnEditContainer="HandleEditContainer" />
    }
</div>

@code {

    [Parameter] public IList<Container> Containers { get; set; }
    [Parameter] public EventCallback<Container> OnSave { get; set; }

    [Inject] private IContainersService ContainersService { get; set; }

    [Inject] private Navigation navigation { get; set; }

    private ContainerModel Model = new ContainerModel();
    MudForm form;

    private async Task HandleAddContainer(Container container)
    {
        await OnSave.InvokeAsync(container);
    }

    private async Task HandleEditContainer(int containerId)
    {
        var _container = Containers.FirstOrDefault(x => x.CONTAINER_ID == containerId);
        Model = _mapper.Map<ContainerModel>(_container);
        // Model.Shipping = new HouseBillOfLading { HOUSE_BILL_OF_LADING_ID = _container?.HOUSE_BILL_OF_LADING_ID };
    }

    private async Task CreateContainer(bool _attachPO)
    {
        await form.Validate();

        if (form.IsValid)
        {
            // the character is removed by the mask
            Model.CONTAINER_NUMBER = Model.CONTAINER_NUMBER.Substring(0, 3) + 'U' + Model.CONTAINER_NUMBER.Substring(3);

            var newContainer = _mapper.Map<ContainerCreateUpdate>(Model);

            var response = await ContainersService.CreateNewAsync(newContainer);

            if (response.HttpStatusCode == HttpStatusCode.Conflict)
                Snackbar.Add(string.Format(L["container_already_exists"], Model.SEAL_NUMBER), Severity.Error);
            else if (response.HttpStatusCode != HttpStatusCode.OK)
                Snackbar.Add(string.Format(L["create_container_failed"], Model.CONTAINER_NUMBER), Severity.Error);
            else
            {
                Containers.Add(response.Response);

                if (_attachPO)
                    await OnSave.InvokeAsync(_mapper.Map<Container>(response.Response));
                else
                    Model = new();

                Snackbar.Add(string.Format(L["container_created"], Model.CONTAINER_NUMBER), Severity.Success);
            }
        }
    }

    private async Task UpdateContainer()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var updatedContainer = _mapper.Map<ContainerCreateUpdate>(Model);

            var response = await ContainersService.UpdateAsync(updatedContainer);

            if (response.HttpStatusCode != HttpStatusCode.OK)
                Snackbar.Add(L["container_update_error"], Severity.Error);
            else
            {
                var obj = Containers.FirstOrDefault(x => x.CONTAINER_ID == Model.CONTAINER_ID);
                var indexOf = Containers.IndexOf(Containers.FirstOrDefault(p => p.CONTAINER_ID == Model.CONTAINER_ID));
                Containers[indexOf] = response.Response;

                Model = new();
                Snackbar.Add(string.Format(L["container_udpate_success."], Model.CONTAINER_NUMBER), Severity.Success);
            }
        }
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", L[$"container_delete_confirm"].ToString());
        var dialogresult = DialogService.Show<DialogConfirm>(L["delete"], parameters);
        var result = await dialogresult.Result;

        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
        {
            var response = await ContainersService.DeleteAsync(Model.CONTAINER_ID);

            if (response.HttpStatusCode != HttpStatusCode.OK)
                Snackbar.Add(L["container_delete_error"], Severity.Error);
            else
            {
                var container = Containers.Single(x => x.CONTAINER_ID == Model.CONTAINER_ID);
                Containers.Remove(container);
                Model = new();
                StateHasChanged();
            }
        }
    }

    private async Task SetShipment(ShippingHeader e)
    {
        Model.Shipping = e;
    }

    private async Task SetContainerType(string e)
    {
        Model.CONTAINER_TYPE = e;
    }

    private bool IsContainerNumberDisabled()
    {
        return string.IsNullOrEmpty(Model.CONTAINER_TYPE);
    }

    public PatternMask MaskContainerNumber = new PatternMask("XXXU#######")
        {
            MaskChars = new[] { new MaskChar('X', @"[a-zA-Z]"), new MaskChar('#', @"[0-9]") },
            Placeholder = '_',
            CleanDelimiters = true,
            Transformation = AllUpperCase
        };

    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

}
